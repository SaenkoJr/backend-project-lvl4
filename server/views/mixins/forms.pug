- const getInputName = (entity, property) => `${entity.constructor.name.toLowerCase()}[${property}]`;

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, label, errors = [])
  - error = errors.find((error) => error.property === propertyName)
  - const classes = ['form-control', error ? 'is-invalid' : ''].join(' ')
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label= label
    input(
      name=getInputName(entity, propertyName)
      class=classes
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if error
      .invalid-feedback.form-control-feedback= Object.values(error.constraints).join('. ')

mixin tagsInput(tags)
  .form-group
    label= t('views.tasks.new.tags')
    - const tagsStr = tags ? tags.map((tag) => tag.name).join(', ') : '';
    input(
      name='task[tags]'
      class='form-control'
      value=tagsStr
      placeholder=t('views.tasks.new.tagsPlaceholder')
    )&attributes(attributes)


mixin submit(form = null)
  .form-group
    input(
      class='btn btn-primary'
      data-disable-with=attributes.value
      type='submit'
    )&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
